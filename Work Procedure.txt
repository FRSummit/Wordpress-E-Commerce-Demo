WORDPRESS E-COMMERCE TUTORIAL & WORK PROCEDURE STEP BY STEP
===================================================================

Step 1: Default Site create
=====================================
1. Download latest wordpress - you will get a zip/rar file
2. Move rar file to xampp > htdocs and extract it there. Change the extract folder name as your project name.
3. Go to browser and open 'http://localhost:8080/phpmyadmin' and create a new database for your project.
4. Open your project into a new browser tab. Ex: 'http://localhost:8080/wordpress-ecommerce'. It will open wordpress language settings page.
5. Select Language as English (United State). Default it is selected. Now click continue.
6. Now you can see an information page where wordpress suggest you about database setup. As we setup our database we don't need to worry about it. Click 'Let's go'.
7. Now you need to give database information which we created before.
8. We need to create user for configuration. Go to phpmyadmin and select our database. Now go to Previleges and create a new user. Ex: [User Name: frsummit, Password: 12345]. Set Global arevileges 'check all'. Now save it as click 'Go'.
9. Now open our wordpress site. Give the information which we just created. As we are using our local server so we set Database Host as localhost Set your custom prefix. Ex: frs_. Now click submit.
10. You can see the installation information. Click 'Run Installation'.
11. Give your wordpress site Title, Username, Password, email. Ex: [ Title: FR SKYNET, Username: frsummit, Password: frs@123, Email: frsummit1@gmail.com ]
12. Now click 'Install Wordpress'. It takes some seconds to instal. After you see Success message, click 'Login'.
13. Use your site information to login.
14. After login you can see the admin pannel of your wordpress site.
15. Move your cursor to top left Title and you can see 'Visit Site'. Click there and you can see your default site.
16. If we notice out database we can see there are 12 table created when we install wordpress. They are frs_commentmeta, frs_comments, frs_links, frs_options, frs_postmeta, frs_posts, frs_termmeta, frs_terms, frs_term_relationships, frs_term_taxonomy, frs_usermeta, frs_users.

Step 2: Custom Theme Development
=====================================
17. Open our project file to VS Code editor.
18. Open wp-content folder. Here we can see plugins, theme, uploads folder and index.php file.
                wp-content: The wp-content folder is an integral part of any WordPress installation, which is why you find it in the main directory of any site built with the WordPress platform. It houses any content provided by users that is not saved in the database. That includes plugins, themes and uploaded media.
                plugin    : This will contatin the plugins f our projct.
                theme     : This one houses all the themes on your site. We can create our custom theme here.
                uploads   : WordPress stores all your image and media uploads in this folder. By default, uploads are organized in /year/month/ folders. Whenever you are creating a WordPress backup, you should include uploads folder.
                index.php : The index. php file in the root of wp-content.

19. Now open wp-content > themes folder. There are already 3 default themes is present and an index.php file. We can remove all these themes and create our custom theme. But never delete index.php file. This file is the root of our theme.
20. Now create a new folder inside theme folder and named it as your custom theme name. Ex: frskynet
21. We need to create some php and css files to intrtoduct our theme folder 'frskynet' to wordpress that it is our theme and every theme has these default files. These are [style.css, index.php, functions.php, page.php, single.php, front-page.php, header.php, footer.php, archive.php, search.php, 404.php]
22. But in this case we are going to create these files step by step.
23. Now create 2 files -> index.php and style.css. These are the base file of our theme. Without these files we can't do anything.
24. Now open any style.css file from other theme [twentynineteen, twentyseventeen, twentynitwenty] and copy the informations which are commented there and paste it to our theme's style.css. Now change the informations as out theme.
                Ex: 
                /*
                        Theme Name: F R Skynet
                        Text Domain: F R Summit
                        Version: 1.0
                        Author: F R Summit
                        Author URI: https://frsummit.github.io/
                        Description: F R Summit
                */

Theme Image setup
=====================================
25. Now open browser and go to Appearance > Theme. We can see our theme is there but there is no profile/cover image. To create our theme image follow bellow steps.
                1. Select your theme image and open it in paint or photoshop.
                2. Resize that image as 1200x900 (width x height).
                3. Rename it as 'screenshot'.
                4. Save it.
                5. Go to browser Appearance > Theme and reload it. You can see the image for your theme.
                6. Click on 'Theme Details', we can see the details which we had added in style.css file.
26. Click 'Activate' to activate our theme.
27. Now reload our site. You can see nothing as we hadn't added any code in our theme index.php file.

Adding code in index.php [We will use flipmart html template for this development tutorial]
=============================================================================================
28. Download flipmart template and extract it.
29. Copy home.html code and paste it to our index.php file, copy assets folder and paste it to our theme folder.
30. Reload site. We can see the broken page or no style page. Lets do it dynamic style.

Make Dynamic index.php file
=====================================
31. Open index.php file and notice the stylesheet link.
32. Add <?php get_template_directory_uri(); ?> before href url assets/..... . It should be echo. So modify that as <?php echo get_template_directory_uri(); ?>
                Ex:
                        if link is like => <link rel="stylesheet" href="assets/css/bootstrap.min.css">
                        modify it like  => <link rel="stylesheet" href="<?php echo get_template_directory_uri(); ?>/assets/css/bootstrap.min.css">

33. If we want to make it secure code put that inside esc_url() function.
                Ex:
                        <link rel="stylesheet" href="<?php echo esc_url(get_template_directory_uri()); ?>/assets/css/bootstrap.min.css">
34. Now do it for all assets like css, js, images or something else. Just replace 'assets/' to '<?php echo esc_url(get_template_directory_uri()); ?>/assets/'
35. Now reload our site. We can see the index page properly.
36. Actually what we have done till now, it is not a proper way or right way. We just want to see our page and test that everythins works properly. This is why we use get_template_directory() function. If we want to make all this thing in a proper way we have to call all of this (css, js) from our functions.php page which we haven't created. From next we will do that.

Dynamic properly
=====================================
37. Open twentyseventeen > header.php and copy html start tag code and paste it to out index.html > html tag
                Ex: 
                        before add : <html lang="en">
                        after add  : <html <?php language_attributes(); ?> class="no-js no-svg">
38. Remove first 2 lines of meta description (charset="utf-8", http-equiv="Content-Type" ...).
39. Copy bloginfo('charset') from twentyseventeen > header.php and paste it to our index.php file.
                Ex: 
                        before add : nothing
                        after add  : <meta charset="<?php bloginfo( 'charset' ); ?>">
40. Remove next 4 lines of meta (description, author, keywords, robots). These will dynamic automatically from wordpress.

Dynamic Title tag
=====================================
41. Replace text from title tag by <?php bloginfo('name'); ?>. Now reload our site. We can see the changes of title. Open admin site > Settings > General > Site Title. This is where we get our title.
42. Now add ' | <?php bloginfo('description'); ?>' after title name function tag. Now reload the site. We can see the description also added with the title.
43. Another way is adding add_theme_support('title-tag'); function in our functions.php file. Lets create functions.php file.

44. Create function.php file inside theme > frskynet (our theme name).
45. We will create 2 new php files named header and footer where we put our header and footer. This is because we don't want to duplicate our header and footer code. We will reuse this header, footer. Before that we add some functions inside head and body tag.
                1. Add <?php wp_head(); ?> before head tag ends. By this function we will pass lots of functionality from functions.php to our php files. Ex: css, header title tag, description etc.
                2. Add <?php wp_footer(); ?> before body tag ends. By this we will pass js resources from functions.php to our php files.
46. Go to function and start by <?php from the first line. Now add add_theme_support('title-tag'); function for title tag. Now remove title tag from index.php and reload the site. Notice the title of the site. This is better way than previous.
47. 
48. If we notice that when we added <?php wp_head(); ?> and <?php wp_footer(); ?> we can see an user bar at the top of the site page. If we don't use these function for head, footer it won't come out. Remove <?php wp_head() ?>, <?php wp_footer() ?> from index.php and add_theme_support( 'title-tag' ); from functions.php, the user bar will vanish and we can't see our site title there. Site title will replace by localhost name. So it is important to know about this.

Separate Header and Footer styles and js sources
====================================================
49. For style follow bellow steps -
                1. Create a function like function frskynet_enqueue_style() {}
                2. Use code reference perameter for script - 
                        wp_enqueue_style ($handle, $src, $deps, $version, $media);
                                $handle : css/js file id
                                $src    : source location
                                $deps   : dependencies, type of array()
                                $version: version of code
                                $media  : (optional)
                3. Remove style link from index.
                4. Add style link into function
                        Ex: 
                                index.php :
                                        <link rel="stylesheet" href="<?php echo esc_url(get_template_directory_uri()); ?>/assets/css/main.css">
                                
                                functions.php :
                                        function frskynet_enqueue_style() {
                                                wp_enqueue_style ('main',get_template_directory_uri() . '/assets/css/main.css', array(), '1.0');
                                        }
                                        add_action('wp_enqueue_scripts', 'frskynet_enqueue_style');
                5. Reload site page. See there is no changes. The style is now dynamically called by function.
                6. Replace/Change rest of the styles link.
                7. To add our theme style.css just add wp_enqueue_style('style', get_stylesheet_uri()); this inside style function

50. For script follow bellow steps -
                1. Create a function like function frskynet_enqueue_script() {}
                2. Use code reference perameter for script - 
                        wp_enqueue_style ($script-name, $src, $deps, $version, boolean);
                                $script-name : js file id
                                $src    : source location (get_template_directory_uri() . '/assets/js/bootstrap-select.min.js')
                                $deps   : dependencies, type of array()
                                $version: version of code
                                boolean  : true/false
                                                if true, this script will add before the body tag ends
                                                if false, this script will add before the head tag ends
                3. Remove js src from index.
                4. Add js link into function
                        Ex: 
                                index.php :
                                        <script src="assets/js/jquery-1.11.1.min.js"></script>
                                
                                functions.php :
                                        function frskynet_enqueue_script() {
                                                wp_enqueue_script('jquery', get_template_directory_uri() . '/assets/js/jquery-1.11.1.min.js', array(), 1, true);
                                        }
                                        add_action('wp_enqueue_scripts', 'frskynet_enqueue_script');
                5. Reload site page. See there is no changes. The js is now dynamically called by function.
                6. Replace/Change rest of the js srcs.
                7. To add our theme default jquery, just add wp_enqueue_script('jquery'); at the top of the script function. No need if we add template's js srcs.

Separate Header and Footer into a separate file
=====================================================
51. Create 2 files header.php and footer.php
52. Move from <!Doctype html> to </header> and paste it to our header.php files and move from <footer> to </html> and paste it to our footer.php file.
53. Add <?php get_header();?> on the top of the index.php and <?php get_footer();?> at the bottom of the index.php
54. Now reload the site. It will load our site header and footer from header.php and footer.php dynamically.

Move Left Sidebar to separate php file [Adding/Calling one .php file inside another .php file]
===============================================================================================
55. Create a new php file and named it left-sidebar.php
56. move sidebar content from index.php to left-sidebar.php
57. In index.php file from where we move the sidebar code add <?php get_template_part('left-sidebar'); ?> there. This will call the left-sidebar.php.
58. Now reload the site. It will load our left-sidebar.php dynamically inside index.php file.

Creating Single page
=====================================
59. Create a new php file named page.php
60. Copy all code from blog.php from template and paste it to page.php
61. Remove from <!Doctype html> to </header> and <footer> to </html> from page.php
62. Add <?php get_header();?> on the top of the page.php and <?php get_footer();?> at the bottom of the page.php
63. This will call our header and footer dynamically
64. Now go to wp_admin page > Pages > All Pages and visit 'Sample Page' by clicking view or if you are using private browser or visit by url just paste '/sample-page' after default url. This will take us our sample page or page.php.
65. Notice caerfully. If we load flitmart template blog.html there we can see the images but in our sample-page, there is no images we can see. It didn't load our images.
66. Here we need to add get_template_directory_uri() function before those tags which are using our assets from our asset.
67. Replace these assets by bellow -
                if src is like  => <img class="img-responsive" src="assets/images/blog-post/blog_big_01.jpg" alt="">
                modify it like  => <link rel="stylesheet" href="<?php echo get_template_directory_uri(); ?>/assets/images/blog-post/blog_big_01.jpg" alt="">
68. If we want to make it secure code put that inside esc_url() function.
                Ex:
                        <img class="img-responsive" src="<?php echo esc_url(get_template_directory_uri()); ?>/assets/images/blog-post/blog_big_01.jpg" alt="">

69. Now reload our site. See ? There all of the images are loaded.
70. Now we are going to make a single post dynamic and remove the rest of the code.
71. Keep a single post and remove/comment all other post.
72. Also remove/comment pagination part. We won't keep it in this file.
73. Reload the site sample-page and see the changes.
74. We will remove image too later. Let's make dynamic the title of the post. Follow the bellow steps -
                1. Remove from <div class="blog-post  wow fadeInUp"> to pagination and paste bellow code there
                        <?php 
                                while ( have_posts() ) : the_post(); ?>
                                        <div class="blog-post  wow fadeInUp">
                                                <h1>
                                                        <a href="<?php the_permalink();?>"><?php the_title(); ?></a>
                                                </h1>
                                                <?php the_content(); ?>
                                        </div>
			        <?php endwhile;
		        ?>
                2. Reload site page and see the changes. It is fully dynamic now.

75. Now move single page sidebar into a separate php file.
76. Create right-sidebar.php
77. Move sidebar code from page.php to right-sidebar.php
78. Add <?php get_template_part('right-sidebar'); ?> to page.php from where we moved right sidebar code.
79. Reload Page. See no changes. But right sidebar is dynamic and loads from a separate file.

==================================================================================
Till now we just created our custom theme. From now we will work woocommerce.
==================================================================================

Woocommerce setup
=====================================
80. Download Woocommerce from 'https://wordpress.org/plugins/woocommerce/'.
81. Go to wp-content > plugin folder and extract woocommerce in this location.
82. Now we will follow woocommerce theme support tutorial 'https://docs.woocommerce.com/document/third-party-custom-theme-compatibility/'.
83. Go to theme > frskynet > functions.php and add following code -
                add_action('after_setup_theme ', 'woocommerce_support');
                function woocommerce_support() {
                        add_theme_support('woocommerce');
                }

84. Now duplicate page.php and rename that woocommerce.php
85. Open woocommerce.php and notice the loop. Delete that part (loop) and place bellow function -
                <?php woocommerce_content(); ?>

86. Now go to wp_admin > Plugin > Installed Plugin, We can see the Woocommerce is present here for activation. If we removed the functionality from function.php for woocommerce theme support and try to activate woocommerce, it will show you a message that will say add woocommerce theme support to your functions.php
87. Now activate woocommerce from wp_admin > Plugin > Installed Plugin.
88. Now we will setup our woocommerce widget configuration.
89. After woocommerce install and setup is done if we notice our database we can see there are 31 new tables are added.

Create First Product
=====================================
90. Now, Let's create our first product. 
                1. Open detail.html from default downloaded flipmart template.
                2. Copy product title, description and go to wp_admin > Product > Add New. Then paste it to title, long description, short description bar.
                3. Now create a category from the right sidebar. Name something. Ex: Fruit.
                4. Add a product image from the right sidebar.
                5. We can add more product image into our gallery. Add more 4 product image to gallery.
                6. Add regular and sell price.
                7. Publish the prouct.

91. Go to wp_admin > Pages > All Pages. We can see there are new pages aded after we installed woocommerce. They are Cart, Checkout, My account, Shop.
92. Open Shop page by clicking view. We can see our product is there which we just created. Now we will design that page as main html page and it's detail page will look like detail.html page.

Design Shop/Category Page
=====================================
93. After adding a product, we can see that style is not fixed for shop page and product single/detail page.
94. Open header.php. Notice body start tag. Remove body class and add body function as <?php body_class(); ?>. It will load woocommerce body style. 
95. Download dummy data. Go to wp_admin > Tools > Import > Wordpress (install)
                # Download Dummy Data from 'https://github.com/woocommerce/woocommerce/tree/master/sample-data'
96. Now click 'Run Importer'. Choose dummy-data.xml file. Upload that. Select admin User and submit.
97. Wait for importing.
98. After Import open wp_admin > Product > All Product. Our dummy products are there. Reload Shop page. We can see the all of the dummy data is there. Now it will be easy to design that page.
99. Also we can see the paging is present.
100. Open woocommerce.php. Before loop, write Hello World in a h1 tag.
                1. Reload Shop page. We can see the Hello World text is there. It comes from woocommerce.php
                2. Click any product. Hello World is present there too.
                # So single product page and shop page both comes from woocommerce.php template.
                # So if sidebar is placed in Shop page at the right and in Product details page it placed in left side, there must be a problem. Read the woocommerce support documentation. There it says that - 'Note: When creating woocommerce.php in your theme’s folder, you will not be able to override the woocommerce/archive-product.php custom template as woocommerce.php has priority over archive-product.php. This is intended to prevent display issues.'
                # This means inside woocommerce > archive.php won't work when we create woocommerce.php.
101. Open woocommerce > template > archive-product.php. Now write 'Hello from woocommerce-product' in a h1 tag before loop starts "woocommerce_product_loop_start()".
102. Now reload Shop page. Shop page means archive-product.php which is inside woocommerce > template. After reloading we can't see the 'Hello from woocommerce-product'. Because frskynet > woocommerce.php is priority high than woocommerce > template.
103. Delete woocommerce.php and reload Shop page. Now we are able to see 'Hello from woocommerce-product' text. We will use woocommerce.php if our Shop page and Detail/Product page will have the same design. That means both page contains sidebar in the left side or right side. In our case, Shop(blog.html) page contains the side bar in it's right and Details/Product (detail.html) page contains the side bar in it's left. So we will use woocommerce template.
104. Woocommerce's default layout loads from woocommerce > template. So if we update something here then it will be overriden. Site win't get the edited layout. So we copy template folder from plugin > woocommerce and paste it to our theme folder and rename this folder 'woocommerce' instead 'template'.
105. Now open archive-product.php from out theme and update that text as 'Hello from our theme template'.
106. Reload Shop page. We can see the changes comes from our theme > woocommerce > archive-product.php
107. If we need to update woocommerce plugins or other plugins, we can update those and our design never get broken as we use it from our theme.
108. Remove text from plugins > woocommerce > template > archive-product.php. Now Lets design Shop page.
                Design Shop Page: 
                        1. Open category.html in a new tab from default template (flipmart). We can see the sidebar is placed in left.
                        2. Now open category.html in editor. Search for 'sidebar'. Notice that, sidebar starts by class 'col-md-3' and contant starts by class 'col-md-9'. There are 3 more divition (div) before these sidebar and content. We will copy from that. [copy from class="body-content outer-top-xs"]
                                Copy bellow code: 
                                        <div class="body-content outer-top-xs">
                                                <div class='container'>
                                                        <div class='row'>
                        3. Open archive-product.php. Paste after get_header() function
                        4. Now before get_footer(), end those div tag. Just 3 times </div>
                        5. There should be error for php start & end tag. Before paste html code close php by '?>' and start php by '<?php'. Inside these paste your html code.
                        6. Now reload Shop page. See the page content got the 'col-md-9'.
                        7. Copy breadcrumb from category.html and paste it in archive-product.php after get_header() before our html code we paste last time.
                        8. Reload Shop page and see the breadcrumb.
                        9. Copy sidebar. It starts by 'col-md-3' and paste it after container > row class.
                        10. Use bellow code or copy from category.html after sidebar code and paste it after sidebar html code in archive-product.php
                                <div class='col-md-9'>
                                        <div class="clearfix filters-container m-t-10"></div>
                                * This time we are not going to copy the banner part.
                        11. This code will end before get_footer(). So ther 2 new </div> will place.
                        12. Reload Shop page and see the sidebar is present.

109. Open project's wp-config.php from root folder and edit WP_DEBUG true. It should be line number 80. Now reload Shop page. You will see an error after the product pagination. It says that - Theme without sidebar.php is deprecated.....
110. Create sidebar.php inside our theme. Reload Shop page. No error there.
111. Open archive-product.php and select code for sidebar. It starts by class="col-md-3 sidebar" and finish before class="col-md-9". Move this code to sidebar and reload SHop page. We can see the sidebar is not present in the left side. It is bellow of the container.
112. Now go to archive-product.php. Search for sidebar code. [do_action('woocommerce_sidebar');?>] Move this function to that place, from where we moved our sidebar html code. Paste it with php start and end tag. Ex: <?php do_action('woocommerce_sidebar');?> ?>. Now Reload Shop page. See there design is fixed. This time Shop page's left sidebar comes from sidebar.php.
113. Now let's design the product in the Shop/Category page.
                3 Products Per Row
                ==============================
                        1. Open Category.html (default/flipmart template) in a new tab.
                        2. Notice that, there are 3 products in a single row but in our wordpress's Shop page's has 4 products in a single row. So we need to modify this that can show 3 products in a single row.
                        3. Seaarch google for 'woocommerce product per row'. Now visit 'Change number of products per row - Woocommerce Docs'. Here you can find how to use custom theme, short code etc. We will use custom theme.
                        4. Copy the custom theme code. Bellow code - 
                                add_filter('loop_shop_columns', 'loop_columns', 999);
                                if (!function_exists('loop_columns')) {
                                        function loop_columns() {
                                                return 3; // 3 products per row
                                        }
                                }
                        5. Paste the code in functions.php.
                        6. Notice, the function return 3. So we will get 3 products in a single row.
                        7. Reload the Shop page. See? There are 3 products in a single row.
                        8. If there need to fix any css then fix that by following bellow - 
                                1. Inspect the product. Clicl the li. li is the product's parent.
                                2. See there should be width at the right side style.
                                3. Width should be 30.75%. If it is not 30.75% then make update it.
                                4. Now you can see the style is fixed in your web page.
                                5. Copy the width.
                                6. Open theme > frskynet > style.css
                                        .woocommerce ul.products.columns-3 li.product, .woocommerce-page ul.products.columns-3 li.product {
                                                width: 30.75%;
                                        }
                                7. You can give a note/comment before that.
                                8. Reload Shop page. See the style is fixed.
                
                Add To Cart - Button fixing
                ==============================
                        1. Go to Category.html (default/flipmart template).
                        2. If we move our cursor over the product we can see there are 3 button come over the product. They are "ADD TO CART", "WISH LIST", "COMPARE". First we will make an "Add To Cart" button. Then we see that if we click "Add To Cart" button how it turn into a view cart.
                        3. Go to our theme > woocommerce > loop > add-to-cart.php. The default (SHop page - no design button) "Add To Cart" button comes from this file.
                        4. Open Category.html in a tab and editor. Search for "Add to cart" button.
                        5. Copy the full section of button. It should be start by class="cart clearfix animate-effect".
                                <div class="cart clearfix animate-effect">
                                <div class="action">
                                        <ul class="list-unstyled">
                                        <li class="add-cart-button btn-group">
                                                <button class="btn btn-primary icon" data-toggle="dropdown" type="button"><i class="fa fa-shopping-cart"></i></button>
                                                <button class="btn btn-primary cart-btn" type="button">Add to cart</button>								
                                        </li>
                                        <li class="lnk wishlist">
                                                <a class="add-to-cart" href="detail.html" title="Wishlist"><i class="icon fa fa-heart"></i></a>
                                        </li>
                                        <li class="lnk">
                                                <a class="add-to-cart" href="detail.html" title="Compare"><i class="fa fa-signal"></i></a>
                                        </li>
                                        </ul>
                                </div>
                                </div>
                        6. There are 3 button section. Remove Compare, Wishlist button section from the code.
                                <div class="cart clearfix animate-effect">
                                <div class="action">
                                        <ul class="list-unstyled">
                                        <li class="add-cart-button btn-group">
                                                <button class="btn btn-primary icon" data-toggle="dropdown" type="button"><i class="fa fa-shopping-cart"></i></button>
                                                <button class="btn btn-primary cart-btn" type="button">Add to cart</button>								
                                        </li>
                                        </ul>
                                </div>
                                </div>
                        7. Now remove the buttons for Add to cart but keep the li for the "Add to cart" button.
                                <div class="cart clearfix animate-effect">
                                <div class="action">
                                        <ul class="list-unstyled">
                                        <li class="add-cart-button btn-group">							
                                        </li>
                                        </ul>
                                </div>
                                </div>
                        8. Copy "Add to cart" default button from woocommerce > loop > add-to-cart.php
                                <a href="%s" data-quantity="%s" class="%s" %s>%s</a>
                        9. Paste the button code inside our li.
                                <div class="cart clearfix animate-effect">
                                <div class="action">
                                        <ul class="list-unstyled">
                                        <li class="add-cart-button btn-group">
                                                <a href="%s" data-quantity="%s" class="%s" %s>%s</a>							
                                        </li>
                                        </ul>
                                </div>
                                </div>
                        10. Now copy the whole code and paste it woocommerce > loop > add-to-cart.php button code (Anchore we copied from - remove anchore and paste the whole code).
                        11. Now Reload Shop page. Move your mouse in any product. You can see the "Add To Cart" button is animating to show itself.
                        12. We can fix the button color by css.
                        13. Inspect the button. Click the product li (parent). Make hover active. Now click button anchore and style it.
                                background-color: #59b210;
                                color: #FFFFFF;
                        14. Open style.css and paste the style here.
                                .woocommerce #respond input#submit, .woocommerce a.button, .woocommerce button.button, .woocommerce input.button {
                                        color: #FFFFFF;
                                        background-color: #59b210;
                                }
                        15. Reload Shop Page. See the button get the style.

                View Cart - Button
                ==============================
                        1. Click "Add To Cart" button. You can see the View Cart button at the right. It should be rlaced "Add To Cart" to "View Cart" and change color. Let's fix it.
                        2. Active hover effect for li (product's parent) from inspect element and click "View Cart" button. Style bellow - 
                                .woocommerce a.added_to_cart {
                                        position: absolute;
                                        left: 0;
                                        bottom: 0;
                                        color: #FFFFFF;
                                        white-space: nowrap;
                                        background: #F1C40F;
                                        width: 120px;
                                        padding: 5px 10px 6px;
                                        font-weight: bold;
                                        text-align: center;
                                        border-radius: 5px;
                                }
                        3. Copy the style and paste it to style.css
                        4. Reload Shop Page. Click "Add To Cart" button. This time it turn into yellow "View Cart" button.
                        5. Click "View Cart" button. It will take you View Cart page.

                Title Color
                ==============================
                        1. Inspect the title and gice a color: #555;
                        2. Copy title (h2) selector and paste it to style.css with color. Bellow style -
                                .woocommerce ul.products li.product h2.woocommerce-loop-product__title {
                                        color: #555;
                                        font-size: 15px;
                                }
                        3. Reload Shop Page. See the changes.

                Review/Rate
                ==============================
                        1. Add to style bellow - 
                                .woocommerce .star-rating span {
                                        color: #FFC808;
                                }
                        2. Reload Shop Page. See the changes.
                
                Sell/Regular Price
                ==============================
                        1. In category.html both of the price are in a same line.
                        2. We need to give a width for price section in our theme.
                        3. Copy bellow code and paste to style.css - 
                                .woocommerce ul.products li.product .price {
                                        width: 250px;
                                        font-size: 14px;
                                        font-weight: 700;
                                        color: #333;
                                }
                        4. Reload Shop Page. See the changes.
                        5. For regular price - 
                                .woocommerce ul.products li.product .price del {
                                        display: inline-block;
                                        float: right;
                                        width: 75%;
                                        color: #d3d3d3;
                                        opacity: 1;
                                        font-weight: normal;
                                }
                        6. Reload Shop Page. See the changes.
                        7. Sell price - 
                                .woocommerce ul.products li.product .price ins {
                                        text-decoration: none;
                                }
                        8. Reload Shop Page. See the changes.
                        9. For my template I just modify some changes as bellow - 
                                .woocommerce ul.products li.product .price ins {
                                        text-decoration: none;
                                        float: left;
                                        margin-right: 10px;
                                }
                                .woocommerce ul.products li.product .price del {
                                        display: inline-block;
                                        color: #d3d3d3;
                                        opacity: 1;
                                        font-weight: normal;
                                }

===================================================================================
TILL NOW WHAT WE MADE (PHP FILES)
=============================================================
index.php, functions.php, heade.php, footer.php, page.php, style.css
left-sidebar.php, right-sidebar.php, sidebar.php

=> index.php                    (General front-page/first page)
        => left-sidebar.php     (index page's left side menu/bar)
        
=> function.php                 (Contains all of the functionality)
=> header.php                   (Header - common/master layout)
=> footer.php                   (Footer - common/master layout)
=> page.php                     (For Blog's list page)
        => right-sidebar.php    (Blog list page's sidebar)

=> style.css                    (Style for project)
=> woocommerce                  (E-Commerce framework)
        => sidebar.php          (Category/Shop page's sidebar - archive-product.php)

What we missed from previous project (Wordpress-CustomHtmlAsTheme):
======================================================================
=> single.php                   (Single blog)
=> front-page.php               (index.php - we created), 
=> archive.php                  (archive-product.php - woocommerce created), 
=> search.php                   (Search anything)
=> 404.php                      (Not Found Page)
===================================================================================

Change "Add To Cart" button text
=================================
114. Google "woocommerce add to cart button text change" and follow Woocommerce Docs - "Change add to cart button text - WooCommerce Docs"
115. Here we can see how to change text in single product, product archive etc.
116. Copy bellow code and paste it to functions.php
                add_filter( 'woocommerce_product_add_to_cart_text', 'custom_woocommerce_product_add_to_cart_text' );

                function custom_woocommerce_product_add_to_cart_text() {
                    global $product;

                    $product_type = $product->get_type();

                    switch ( $product_type ) {
                        case 'external':
                            return __( 'Buy product', 'woocommerce' );
                            break;
                        case 'grouped':
                            return __( 'View product', 'woocommerce' );
                            break;
                        case 'simple':
                            return __( 'Add to cart', 'woocommerce' );
                            break;
                        case 'variable':
                            return __( 'Select option', 'woocommerce' );
                            break;
                        default:
                            return __( 'Read more', 'woocommerce' );
                    }   
                }
117. Reload Shop page. YOu can see the changes when you mouse over any product.

Dynamic Breadcrumb, pagination
=================================
118. To dynamic breadcrumb follow bellow steps - 
                1. Go to archive-product.php, see the breadcrumb is static.
                        <div class="breadcrumb">
                            <div class="container">
                                <div class="breadcrumb-inner">
                                    <ul class="list-inline list-unstyled">
                                        <li><a href="#">Home</a></li>
                                        <li class='active'>Handbags</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                2. Remove ul -
                        <div class="breadcrumb">
                            <div class="container">
                                <div class="breadcrumb-inner">
                                </div>
                            </div>
                        </div>
                3. Replace ul by <?php woocommerce_breadcrumb(); ?> function -
                        <div class="breadcrumb">
                            <div class="container">
                                <div class="breadcrumb-inner">
                                    <?php woocommerce_breadcrumb(); ?>
                                </div>
                            </div>
                        </div>
                4. Reload Shop page and see the breadcrumb is now dynamic.
                5. Problem is category.html page's breadcrumb start using ul,li but our breadcrumb starts by nav tag.
                6. You can fix style by css for nav or search google by "woocommerce breadcrumb". Follow the woocommerce docs and then use "CHange all the things" from documentation.
                7. Copy that code and paste it to functions.php - 
                        add_filter('woocommerce_breadcrumb_defaults', 'frskynet_woocommerce_breadcrumbs');
                        function frskynet_woocommerce_breadcrumbs() {
                            return array(
                                'delimiter' => ' &#47; ',
                                'wrap_before' => '<nav class="woocommerce-breadcrumb" itemprop="breadcrumb">',
                                'wrap_after' => '</nav>',
                                'before' => '',
                                'after' => '',
                                'home' => _x('Home', 'breadcrumb', 'woocommerce'),
                            );
                        }
                8. Function name must be unique.
                9. Notice, the breadcrumb starts by nav tag.
                10. Now modify this by our category.html design. Replace '<nav class="woocommerce-breadcrumb" itemprop="breadcrumb">' by '<div class="breadcrumb-inner"><ul class="list-inline list-unstyled">' in function.
                        function frskynet_woocommerce_breadcrumbs() {
                            return array(
                                'delimiter' => ' &#47; ',
                                'wrap_before' => '<div class="breadcrumb-inner">
                                                        <ul class="list-inline list-unstyled">',
                                'wrap_after' => '</ul>
                                                </div>',
                                'before' => '',
                                'after' => '',
                                'home' => _x('Home', 'breadcrumb', 'woocommerce'),
                            );
                        }
                11. Remove div [class="breadcrumb-inner"] from archive-product.php.
                12. Reload Shop page and see the breadcrumb looks like default template (category.html) html code structure.
                13. We can change Home text if we modify last return perameter of that function's first variable "Home".
                14. We can also change the '/' of breadcrumb separator by modifying delimiter of the function. Use '-' for testing or you can use anything.

119. Remove breadcrumb from top of the products category section.
                1. Go to the last woocommerce documentation for breadcrumb and follow the 'Remove the breadcrumbs'. Copy remove breadcrumb function and paste it to functions.php
                        add_action( 'init', 'frskynet_remove_wc_breadcrumbs' );
                        function frskynet_remove_wc_breadcrumbs() {
                                remove_action( 'woocommerce_before_main_content', 'woocommerce_breadcrumb', 20, 0 );
                        }
                2. Function name must be unique.
                3. Now google 'woocommerce shop page vitual layout' and visit 'https://www.businessbloomer.com/woocommerce-visual-hook-guide-archiveshopcat-page/'
                4. Copy 'woocommerce_before_main_content' from function and search it in that page.
                5. Notice the first result. We need to remove this.
                6. Now go to archive-product.php and search for 'woocommerce_before_main_content'. Here we can see there are 2 items. They are 'woocommerce_breadcrumb - 20' and 'woocommerce_output_content_wrapper - 10' (in the comment).
                7. We want to remove 'woocommerce_breadcrumb - 20'.
                8. Notice 
                        remove_action( 'woocommerce_before_main_content', 'woocommerce_breadcrumb', 20, 0 );
                        Here it says that we are going to remove 'woocommerce_breadcrumb - 20'. The 3rd and 4th perameter is the position and priority (before/after).
                9. Reload Shop page. We can see the breadcrumb is gone for that section.

120. Remove Title from top of the products category section. (Shop)
                1. Open archive-product.php and notice the header.
                        <?php if (apply_filters('woocommerce_show_page_title', true)): ?>
                2. apply_filters() function's 2nd perameter is true. 
                3. Make it false and Reload the Shop page. You can see the changes.
121. Remove 'Showing Result' from top of the products category section. (Shop)
                1. visit 'https://www.businessbloomer.com/woocommerce-visual-hook-guide-archiveshopcat-page/'
                2. Notice the hook before the Showing result. (3rd one) [woocommerce_before_shop_loop]
                3. Search 'woocommerce_before_shop_loop' in archive-product.php
                4. Here we can see there are 3 items. The last 2 items are 'woocommerce_result_count - 20' and 'woocommerce_catalog_ordering - 30' (in the comment).
                5. But we have only 'woocommerce_catalog_ordering - 30' in category.html but 'woocommerce_result_count - 20' is not there.
                6. Copy the last function and modify libe bellow
                        add_action( 'init', 'frskynet_remove_woocommerce_result_count' );
                        function frskynet_remove_woocommerce_result_count() {
                                remove_action( 'woocommerce_before_shop_loop', 'woocommerce_result_count', 20, 0 );
                        }
                7. Paste it to functions.php
                8. Reload the Shop page. See the changes.

122. Remove default catelog ordering from top of the products category section. (Shop)
                1. At first notice the left side of product category section. It is default ordering. Remove this default ordering.
                2. Copy removing item function's code and paste it the functions.php
                3. Search 'woocommerce_before_shop_loop' in archive-product.php
                4. We are going to remove 'woocommerce_catalog_ordering - 30' item.
                5. Modify code like bellow
                        add_action( 'init', 'frskynet_remove_woocommerce_catelog_ordering' );
                        function frskynet_remove_woocommerce_catelog_ordering() {
                                remove_action( 'woocommerce_before_shop_loop', 'woocommerce_catalog_ordering', 30, 0 );
                        }
                6. Notice the remove_action() function, 2nd perameter is the name of item what we want to remove and the 3rd perameter is the number of that item which declear in archive-product.php
                7. Reload Shop page. See there is no default catelog ordering anymore.

123. Pagination - Grid/List, Sorting by position, Show product, paging
                1. Open category.html and notice the ordering section by inspect element (grid, list ....)
                2. It is under the class="clearfix filters-container m-t-10" section. And then product looping class="search-result-container".
                3. Now notice our project's Shop pages loop section. We already have class="clearfix filters-container m-t-10" section.
                4. Open archive-product.php. There we can find the loop for product. 
                        woocommerce_product_loop_start();
                5. Before this loop, we can find a divition (div) class="clearfix filters-container m-t-10" which is under another divition (div) class="col-md-9". We already have it.
                6. We need a row after the divition (div) class="clearfix filters-container m-t-10" and inside the row we need a column.
                7. Go after do_action('woocommerce_before_shop_loop'); and before woocommerce_product_loop_start();
                8. Create a divition (div) and class="row".
                9. Create 4 divition (div) and class="col-md-3" inside the row divition (div).
                        <div class="row">
                                <div class="col-md-3">Col 1</div>
                                <div class="col-md-3">Col 2</div>
                                <div class="col-md-3">Col 3</div>
                                <div class="col-md-3">Col 4</div>
                        </div>
                10. Reload Shop page. We have the row with 4 column.
                11. Pagination - 
                        1. Inspect category.html pagination. It developed by ul, li and this ul,li is under a divition (div) class="pagination-container".
                        2. So if we add the same divition (div) class="pagination-container" before our pagination we will get the same style as category.html.
                        3. We can do this by js or custom php. But custom php is better than js. (In this case).
                        4. Google 'wordpress pagination with custom class' then visit 'https://wordpress.stackexchange.com/questions/126080/changing-pagination-list-class'
                        5. Copy bellow code from the site - 
                                function bittersweet_pagination() {
                                    global $wp_query;
                                    if ($wp_query->max_num_pages <= 1) {
                                        return;
                                    }
                                    $big = 999999999; // need an unlikely integer
                                    $pages = paginate_links(array(
                                        'base' => str_replace($big, '%#%', esc_url(get_pagenum_link($big))),
                                        'format' => '?paged=%#%',
                                        'current' => max(1, get_query_var('paged')),
                                        'total' => $wp_query->max_num_pages,
                                        'type' => 'array',
                                    ));
                                    if (is_array($pages)) {
                                        $paged = (get_query_var('paged') == 0) ? 1 : get_query_var('paged');
                                        echo '<div class="pagination-wrap"><ul class="pagination">';
                                        foreach ($pages as $page) {
                                            echo "<li>$page</li>";
                                        }
                                        echo '</ul></div>';
                                    }
                                }
                        6. Paste it to functions.php
                        7. Rename the function as flipmart_pagination.
                        8. Notice carefullt. What is done here ? Here we use paginate_links ans using this we are passing some perameters. We can pass more perameters by this.
                        9. In the 2nd condition's first echo - we can place our custom class here. Modify this echo like bellow - 
                                echo '<div class="pagination-container"><ul class="list-inline list-unstyled">';
                        10. Now go to archive-product.php and go to the row we created with 4 columns.
                        11. Replace 'Col 4' by the pagination function name.
                                before: <div class="col-md-3">Col 4</div>
                                after : <div class="col-md-3"><?php flipmart_pagination(); ?></div>
                        12. Reload Shop page. We can see the pagination here.
                        13. If we inspect the Shop page's pagination we can see the '<div class="pagination-wrap"><ul class="pagination">' - these div and ul are added by the paginaation function.
                        14. Notice there next text come instead the arrow button (previous, next arrow button).
                        15. Google 'paginate_links' and visit 'https://wpseek.com/function/paginate_links/' or 'https://developer.wordpress.org/reference/functions/paginate_links/'
                        16 There we can see the peremeters which can pass by this function.
                        17. From there we take 3 perameter.
                                'prev_next'          => true,
                                'prev_text'          => __( '&laquo; Previous' ),
                                'next_text'          => __( 'Next &raquo;' ),
                        18. Now paste it after the other perameters. Now it looks like bellow - 
                                $pages = paginate_links(array(
                                    'base' => str_replace($big, '%#%', esc_url(get_pagenum_link($big))),
                                    'format' => '?paged=%#%',
                                    'current' => max(1, get_query_var('paged')),
                                    'total' => $wp_query->max_num_pages,
                                    'type' => 'array',
                                    'prev_next' => true,
                                    'prev_text' => __( '&laquo; Previous' ),
                                    'next_text' => __( 'Next &raquo;' ),
                                ));
                        19. If we make false for 'prev_next', button won't show. '&laquo; Previous' means for previous we can see the previous arrow with 'Previous' text. 'Next &raquo;' means for previous we can see the next arrow with 'Next' text. 
                        20. Remove Previous and Next text from there.
                                'prev_text' => __( '&laquo;' ),
                                'next_text' => __( '&raquo;' ),
                        21. Reload the page. See there is no next or previous text. Only arrow.
                        22. Still we have not the same style. Google 'font awsome next arrow' and get right arrow code.
                                <i class="fa fa-arrow-right" aria-hidden="true"></i>
                        23. Paste that code for both os the peremeters. Modify the previous like bellow
                                <i class="fa fa-arrow-left" aria-hidden="true"></i>
                        24. code should looks like bellow - 
                                'prev_text' => __( '<i class="fa fa-arrow-left" aria-hidden="true"></i>' ),
                                'next_text' => __( '<i class="fa fa-arrow-right" aria-hidden="true"></i>' ),
                        25. Reload Shop page. See the arrow. This time arrow doesn't match.
                        26. Copy from category.html font awsome arrows and paste it to paginate_links() function's perameter value.
                        27. Code should looks like bellow - 
                                'prev_text' => __( '<i class="fa fa-angle-left"></i>' ),
                                'next_text' => __( '<i class="fa fa-angle-right"></i>' ),
                        28. Reload Shop page. See the arrow. Almost same.
                        29. Pick the class="pagination-container" and add following style to style.css - 
                                .pagination-container {
                                    float: right;
                                }
                                .pagination-container ul li a.next.page-numbers,
                                .pagination-container ul li a.prev.page-numbers {
                                    background: #ccc none repeat scroll 0 0;
                                    color: #fff;
                                    padding: 0 9px;
                                    border-radius: 4px;
                                }
                                .pagination-container ul li:hover a.next.page-numbers,
                                .pagination-container ul li:hover a.prev.page-numbers {
                                    background: #333;
                                }
                        30. Reload Shop page. See the changes.
                        31. Now notice the Shop page bottom pagination. Let's remove this.
                                1. Go to archive-product.php and Look for do_action('woocommerce_after_shop_loop'); function after  woocommerce_product_loop_end(); function.
                                2. There is a 'woocommerce_pagination - 10' already set by default.
                                3. We remove this by functions.php
                                4. Copy a remove function and paste it bellow.
                                5. We will remove this pagination 'woocommerce_pagination - 10' under 'woocommerce_after_shop_loop' and the 3rd perameter is 10 which is priority.
                                6. Reload Shop Page. See there is no paginaation at the bottom.
                        32. Place our pagination at the bottom.
                                1. Copy our pagination function '<?php flipmart_pagination(); ?>' code from the class="col-md-3" and paste it after do_action('woocommerce_after_shop_loop');
                                2.Reload Shop Page. See our custom pagination is there.

124. 
125. 
126. 
127. 
128. 
129. 
130. 
131. 
132. 
133. 
134. 
135. 
136. 
137. 
138. 
139. 
140. 
141. 
142. 
143. 
144. 
145. 
146. 
147. 
148. 
149. 
150. 
151. 
152. 
153. 
154. 
155. 
156. 
157. 
158. 
159. 
160. 
161. 
162. 
163. 
164. 
165. 
166. 
167. 
168. 
169. 
170. 
171. 
172. 
173. 
174. 
175. 
176. 
177. 
178. 
179. 
180. 
181. 
182. 
183. 
184. 
185. 
186. 
187. 
188. 
189. 
190. 
191. 
192. 
193. 
194. 
195. 
196. 
197. 
198. 
199. 
200. 

===============================================
HOW TO UPDATE WORDPRESS MANUALLY
===============================================
#=>> Follow this link - https://www.youtube.com/watch?v=hLo_p6kk44k
1. Deactivate all of your plugins.
2. Download latest WordPress.
3. Remove wp-admin, wp-includes from the root folder of the project.
4. Copy latest WordPress's wp-admin, wp-includes and paste it to project's root folder.
5. Open wp-content from the latest WordPress and copy everything from there and paste it to our project's wp-content. If there need to replace anything, replace that.
6. Copy the rest of the files from latest WordPress's root folder and paste those to our project's root folder. If there need to replace anything, replace those all.